@page "/perdicts"
@rendermode InteractiveServer

@using System.IO.Ports
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using LiveChartsCore
@using LiveChartsCore.SkiaSharpView
@using LiveChartsCore.SkiaSharpView.Blazor
@implements IDisposable

@inject Batc.Web.Services.AppState AppState
@inject Batc.Web.Services.VisitLogService VisitLog
@inject NavigationManager Nav
@inject Batc.Web.Services.ChartState Chart
@inject Batc.Web.Services.SignalService Signal

<header class="topbar">
    <div class="brand">
        <img src="images/logo.png" alt="BATC" />
        <span>BATC</span>
        <button class="back-btn" title="Back" @onclick="GoBack">
            <img src="images/back.png" alt="Back" />
            <span>Back</span>
        </button>
    </div>

    <div class="user-section">
        <button class="icon-btn settings-btn" @onclick="ShowHelp">
            <img src="images/setting.png" alt="Settings" width="20" height="20" />
        </button>
        <button class="icon-btn notification-btn">
            <img src="images/notification.png" alt="Notifications" width="20" height="20" />
        </button>

        <div class="user">
            <img src="images/醫生_1.png" alt="Dr. Wang" class="avatar" />
            <span>Dr. Wang</span>
        </div>

        <button class="logout-btn" @onclick="Logout">Log out</button>
    </div>
</header>

@if (showHelpModal)
{
    <div class="modal-overlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1000; display: flex; align-items: center; justify-content: center;" @onclick="HideHelp">
        <div class="modal-content" style="background: white; padding: 20px; border-radius: 8px; max-width: 500px; margin: 20px; box-shadow: 0 4px 20px rgba(0,0,0,0.3);" @onclick:stopPropagation="true">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <h3 style="margin: 0; color: #000;">使用說明</h3>
                <button @onclick="HideHelp" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
            </div>
            <div style="line-height: 1.2; color: #555;">
                <p>• 首先須先選擇哪個模型進行預測</p>
                <p>• 再選擇是否此患者未來要加入訓練</p>
                <p>• 患者感受在治療截止後才能填寫</p>
                <p>• 需先測量 baseline 才能進行後續預測</p>
                <p>• 點擊 <strong>Finish Prediction</strong> 才完成全部治療</p>
            </div>
        </div>
    </div>
}

@{
    // 這段僅建立本地變數顯示用（未在畫面上使用 p/avatar 可保留或移除）
    var p = (string.IsNullOrWhiteSpace(Id)
                ? AppState.Patients?.FirstOrDefault()
                : AppState.Patients?.FirstOrDefault(x => x.Id == Id))
            ?? new Batc.Web.Models.Patient { Name = "James Wilson", Id = "PAT-2023-1296", Age = 35, Gender = "Male", BloodType = "A", Height = 178, Weight = 75, AvatarUrl = "images/病人_1.png" };
    var avatar = string.IsNullOrWhiteSpace(p.AvatarUrl) ? "images/病人_1.png" : p.AvatarUrl;
}

<main class="wrap">
    <section class="grid page-stack">
        <h3>即時波形（CH1 / CH2）</h3>

        <!-- 兩個示波框：直向堆疊 -->
        <div class="signal-grid">
            <div class="scope-card">
                <div class="scope-title">CH1</div>
                <div class="scope-row">
                    <lvc:CartesianChart Series="@seriesCh1" YAxes="@y1" Height="220" />
                    <div class="axis-panel">
                        <div>Max</div><input type="number" @bind="y1Max" @bind:event="oninput" />
                        <div>Min</div><input type="number" @bind="y1Min" @bind:event="oninput" />
                    </div>
                </div>
            </div>

            <div class="scope-card">
                <div class="scope-title">CH2</div>
                <div class="scope-row">
                    <lvc:CartesianChart Series="@seriesCh2" YAxes="@y2" Height="220" />
                    <div class="axis-panel">
                        <div>Max</div><input type="number" @bind="y2Max" @bind:event="oninput" />
                        <div>Min</div><input type="number" @bind="y2Min" @bind:event="oninput" />
                    </div>
                </div>
            </div>
        </div>

        @if (showSpectrum)
        {
            <h4 class="mt-4">（可選）頻譜</h4>
            <div class="signal-grid">
                <lvc:CartesianChart Series="@seriesF1" Height="220" />
                <lvc:CartesianChart Series="@seriesF2" Height="220" />
            </div>
        }

        <!-- 工具列：在底部 -->
        <div class="signal-toolbar">
            <label>COM 連線：</label>

            <select @bind="selectedPort" style="min-width:110px">
                @if (ports.Count == 0)
                {
                    <option disabled>找不到任何埠</option>
                }
                else
                {
                    @foreach (var n in ports)
                    {
                        <option value="@n">@n</option>
                    }
                }
            </select>

            <button title="重新掃描" @onclick="ReloadPorts">🔄</button>
            <button @onclick="Connect" disabled="@string.IsNullOrEmpty(selectedPort)">連線</button>
            <button @onclick="Disconnect">中斷</button>

            <span style="margin-left:12px">視窗寬度：</span>
            <input type="number" @bind="Chart.MaxPoints" style="width:90px" />

            <span class="com-status">COM 狀態：@_status</span>
            <button class="demo-btn" @onclick="InjectDemo">測試資料</button>
        </div>
    </section>
</main>

@code {
    // -------- 路由 --------
    [Parameter] public string? Id { get; set; }

    // -------- LiveCharts（2 個通道 + 可選頻譜）--------
    private bool showSpectrum = false;

    private ISeries[] seriesCh1 = Array.Empty<ISeries>();
    private ISeries[] seriesCh2 = Array.Empty<ISeries>();
    private ISeries[] seriesF1 = Array.Empty<ISeries>();
    private ISeries[] seriesF2 = Array.Empty<ISeries>();

    private Axis axis1 = new() { MinLimit = -100, MaxLimit = 100 };
    private Axis axis2 = new() { MinLimit = -100, MaxLimit = 100 };
    private Axis[] y1 => new[] { axis1 };
    private Axis[] y2 => new[] { axis2 };
    private double y1Min { get => axis1.MinLimit ?? -100; set => axis1.MinLimit = value; }
    private double y1Max { get => axis1.MaxLimit ?? 100; set => axis1.MaxLimit = value; }
    private double y2Min { get => axis2.MinLimit ?? -100; set => axis2.MinLimit = value; }
    private double y2Max { get => axis2.MaxLimit ?? 100; set => axis2.MaxLimit = value; }

    // 訂閱 SignalService 用
    private Action<double[], double[]>? _onWave;
    private Action<double[], double[]>? _onSpec;

    // -------- COM 掃描/連線 --------
    private List<string> ports = new();
    private string? selectedPort;

    private void ReloadPorts()
    {
        try
        {
            ports = SerialPort.GetPortNames()
                              .OrderBy(n => n, StringComparer.OrdinalIgnoreCase)
                              .ToList();
            if (string.IsNullOrEmpty(selectedPort) || !ports.Contains(selectedPort))
                selectedPort = ports.FirstOrDefault();
        }
        catch
        {
            ports = new();
            selectedPort = null;
        }
    }

    private string _status = "尚未連線";
    private bool _connecting;

    private async Task Connect()
    {
        if (_connecting) return;
        try
        {
            _connecting = true;
            _status = "連線中…";
            StateHasChanged();

            if (string.IsNullOrEmpty(selectedPort)) ReloadPorts();
            if (string.IsNullOrEmpty(selectedPort))
            {
                _status = "找不到任何 COM 埠";
                return;
            }

            await Signal.StartAsync(selectedPort!);
            _status = $"已連線：{selectedPort}";
        }
        catch (Exception ex)
        {
            _status = $"連線失敗：{ex.Message}";
        }
        finally
        {
            _connecting = false;
            StateHasChanged();
        }
    }

    private void Disconnect()
    {
        try
        {
            Signal.Stop();
            _status = "已中斷";
        }
        catch (Exception ex)
        {
            _status = $"中斷時發生錯誤：{ex.Message}";
        }
    }

    // -------- 生命週期 --------
    protected override void OnInitialized()
    {
        // 綁定 LiveCharts 的資料來源
        seriesCh1 = new ISeries[] { new LineSeries<double> { Values = Chart.Ch1, GeometrySize = 0 } };
        seriesCh2 = new ISeries[] { new LineSeries<double> { Values = Chart.Ch2, GeometrySize = 0 } };
        seriesF1 = new ISeries[] { new LineSeries<double> { Values = Chart.Fft1, GeometrySize = 0 } };
        seriesF2 = new ISeries[] { new LineSeries<double> { Values = Chart.Fft2, GeometrySize = 0 } };

        // 訂閱資料事件
        _onWave = (a, b) => { Chart.AppendWave(a, b); _ = InvokeAsync(StateHasChanged); };
        _onSpec = (f1, f2) => { if (showSpectrum) { Chart.SetSpectrum(f1, f2); _ = InvokeAsync(StateHasChanged); } };
        Signal.OnWaveBlock += _onWave;
        Signal.OnSpectrum += _onSpec;

        // 掃一次 COM
        ReloadPorts();
    }

    public void Dispose()
    {
        if (_onWave is not null) Signal.OnWaveBlock -= _onWave;
        if (_onSpec is not null) Signal.OnSpectrum -= _onSpec;
    }

    // -------- Header/Modal 動作 --------
    private bool showHelpModal = false;
    private void ShowHelp() => showHelpModal = true;
    private void HideHelp() => showHelpModal = false;
    private void Logout() => Nav.NavigateTo("/");
    private void GoBack() => Nav.NavigateTo($"/confirm/{Uri.EscapeDataString(Id ?? "")}");

    // -------- 測試資料（驗證圖表/狀態）--------
    private async Task InjectDemo()
    {
        const int N = 512;
        var ch1 = new double[N];
        var ch2 = new double[N];
        for (int i = 0; i < N; i++)
        {
            ch1[i] = 50 * Math.Sin(2 * Math.PI * i / 48.0);
            ch2[i] = 50 * Math.Cos(2 * Math.PI * i / 60.0);
        }

        Chart.AppendWave(ch1, ch2);
        await InvokeAsync(StateHasChanged);
        _status = "已注入測試資料（若看得到線，圖表OK，請檢查 COM/Service）";
    }
}
